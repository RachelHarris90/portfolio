# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

export HOMEBREW_GITHUB_API_TOKEN="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"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git 
    asdf
    aws
    brew
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias aliases="code ~/.zshrc"

export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"
alias mysql="/usr/local/mysql/bin/mysql"
alias mysqladmin="/usr/local/mysql/bin/mysqladmin"

# Perform CLI
alias pcstatus="perform-cli status"
alias pcstart="perform-cli run al"
alias pcstop="perform-cli run sa"
alias pistart="perform-cli performance-insights start"
alias pistop="perform-cli performance-insights sa"
alias pistatus="perform-cli performance-insights status"
alias uistart="perform-cli performance-ui start"
alias uistop="perform-cli performance-ui stop"
alias apistart="perform-cli performance-api start"
alias apistop="perform-cli performance-api stop"

# Cont Perf Engine
alias cpesupport="rm -rf .overmind.support.sock && ./script/support"
alias cpesetup="./script/setup"
alias cpestart="rm -rf ./.overmind.sock && ./script/server"
alias cperesetdb="bin/rails db:drop db:create db:schema:load db:seed:development"

alias rbfix="standardrb --fix"
alias apireset="bin/setup --reset"
alias apiinstall="bundle install"
alias migrate="bin/rails db:migrate"
alias genmigrate="bin/rails generate migration" // follow with name of the migration e.g. RemovePerformanceInsightsFeatureFlag
alias testmigrate="bin/rails db:migrate RAILS_ENV=test"

alias rspec="bundle exec rspec --color"

alias console="bin/rails console"
alias server="bin/rails server"
alias pud="bin/packwerk update-deprecations"

alias yi="yarn install"
alias yuil="yarn upgrade-interactive --latest"

alias gc="git commit -m"
alias gca="git commit --amend"
alias gs="git status"
alias gsm="git switch master"
alias ga="git add -A"
alias gb="git checkout -b"
alias gr="git reset"
alias gd="git diff"
alias gds="git diff -staged"
alias gpull="git pull"
alias gpush="git push"
alias gstash="git stash save"

alias checkport3000="lsof -i :3000"
alias checkport3030="lsof -i :3030"
alias checkport8080="lsof -i :8080"
alias killport3002=kill -9 $(lsof -ti:3002)

alias openapiref="redocly lint reference/api/v1/openapi.yaml"
alias openapical="redocly lint packs/calibrations/reference/openapi.yaml"

alias checkpack="bin/packwerk check"
alias updatepack="bin/packwerk update-todo"

# DB generic
alias killdb="bin/rails db:drop db:create db:schema:load"
# Perform-API
alias reseeddb="bin/rails db:seed db:seed:non_standard_evaluation_cycles"

eval "$(direnv hook zsh)"

# AWS console names
export ELK="console.performance.elk.usw2.dev-us.cultureamp.io."
export FALCON="console.performance.falcon.usw2.dev-us.cultureamp.io."
export DOLLY="console.performance.dolly.usw2.dev-us.cultureamp.io."
export EUPROD="console.performance.production-eu.euw1.prod-eu.cultureamp.io."
export USPROD="console.performance.production.usw2.prod-us.cultureamp.io."
export EUSTAGING="console.performance.preprod-eu.euw1.staging-eu.cultureamp.io."
export USSTAGING="console.performance.preprod.usw2.staging-us.cultureamp.io."

# AWS login to console function
function aws_console() {
  profile=$1
  console_name=$(echo $2)

  echo ""
  echo ">> Signing into $profile..."
  aws sso login --profile $profile

  echo ""
  echo ">> Getting the instance id for $console_name..."
  instance=$(
    aws ec2 describe-instances \
      --filter "Name=instance-state-name,Values=running" "Name=tag:Name,Values=$console_name" \
      --query "Reservations[*].Instances[*].[InstanceId]" \
      --profile $profile \
      --output text
  )

  echo ""
  echo ">> Starting to SSM session..."
  aws ssm start-session --target ${instance} --profile $profile
}

# AWS login to specific consoles
alias awselk="aws_console dev-admin $ELK"
alias awsfalcon="aws_console dev-admin $FALCON"
alias awsdolly="aws_console dev-admin $DOLLY"
alias awseustaging="aws_console eu-staging-ssh $EUSTAGING"
alias awsusstaging="aws_console us-staging-ssh $USSTAGING"
alias awseuprod="aws_console eu-prod-ssh $EUPROD"
alias awsusprod="aws_console us-prod-ssh $USPROD"

# Cont perf engine - access to console via AWS
# aws ecs execute-command --cluster cont-perf-engine --task b0812c512265400fb3f63b61c6d9809a \ --container cont-perf-engine-elk-service-api --interactive --comand "bash"
# export DATABASE_URL="postgres://postgres:y3aLKTiRms8cXRYW2pEJmxjoaqnQ1CGu@cont-perf-engine-elk.cz3s3ph0suab.us-west-2.rds.amazonaws.com:5432"